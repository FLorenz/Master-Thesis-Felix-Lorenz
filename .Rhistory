facet_grid(~party, switch = "x", scales = "free_x", space = "free_x",labeller = as_labeller(party_names))+
geom_text(aes(label = glue::glue("{value}")),size =4,vjust = -.2)+
scale_x_discrete(labels=c("total" = "Total", "tw" = "With Twitter Account",
"sample" = "In Sample"))+
labs(y="Number of Candidates",x=NULL)+
ggthemes::theme_clean(base_family = "noto")+
theme(axis.text.x = element_text(angle = 45,hjust=1, size =11),
axis.title.y = element_text(size =11),
plot.background=element_blank(),
strip.text = element_text(
size = 14,face = "bold"))
ggsave("data/plots/descriptive/dist2.pdf",desc_plot,width = 297, height = 150, units = "mm",
device = cairo_pdf())
dev.off()
################################
# Timeline Share of Media Data #
################################
media = share_data %>%
select(created_at,share.tv,share.print) %>%
pivot_longer(c(share.tv,share.print))
media$name_fac = as.factor(media$name)
levels(media$name_fac) = c("Print Media","Television")
media_share = ggplot(media,aes(x=created_at,y=value))+
geom_line(aes(color = name_fac),show.legend = F)+
facet_wrap(name_fac ~ .,ncol =1)+
labs(x=NULL,y=NULL)+
theme(text = element_text(family  = "noto"),
axis.text.x = element_text(angle = 45,hjust=1, size =14),
axis.text.y = element_text( size =14),
plot.background=element_blank(),
strip.text = element_text(
size = 14,face = "bold"),
legend.position="none",
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(linetype = 'solid',
colour = "grey"),
strip.background =element_rect(fill="lightgrey"))
ggsave("data/plots/descriptive/media_share.pdf",media_share,width = 297, height = 90, units = "mm",
device = cairo_pdf())
dev.off()
media_share
desc_plot
desc_plot = final_data %>%
ggplot(aes(fct_reorder(name,desc(value)),value, group=party))+
geom_bar(stat="identity",
position = "dodge",
fill = test$color,
color = "black",show.legend = F) +
facet_grid(~party, switch = "x", scales = "free_x", space = "free_x",labeller = as_labeller(party_names))+
geom_text(aes(label = glue::glue("{value}")),size =4,vjust = -.2)+
scale_x_discrete(labels=c("total" = "Total", "tw" = "With Twitter Account",
"sample" = "In Sample"))+
labs(y="Number of Candidates",x=NULL)+
ggthemes::theme_clean(base_family = "noto")+
theme(axis.text.x = element_text(angle = 45,hjust=1, size =11),
axis.title.y = element_text(size =11),
plot.background=element_blank(),
strip.text = element_text(
size = 14,face = "bold"))
desc_plot = final_data %>%
ggplot(aes(fct_reorder(name,desc(value)),value, group=party))+
geom_bar(stat="identity",
position = "dodge",
fill = final_data$color,
color = "black",show.legend = F) +
facet_grid(~party, switch = "x", scales = "free_x", space = "free_x",labeller = as_labeller(party_names))+
geom_text(aes(label = glue::glue("{value}")),size =4,vjust = -.2)+
scale_x_discrete(labels=c("total" = "Total", "tw" = "With Twitter Account",
"sample" = "In Sample"))+
labs(y="Number of Candidates",x=NULL)+
ggthemes::theme_clean(base_family = "noto")+
theme(axis.text.x = element_text(angle = 45,hjust=1, size =11),
axis.title.y = element_text(size =11),
plot.background=element_blank(),
strip.text = element_text(
size = 14,face = "bold"))
desc_plot
ts_share
ts_immi
tl_plot
# Data
db.impute = readRDS("data/VAR_data/db.impute.rds")
# Data
db.impute = readRDS("data/db.impute.rds")
db.monday = readRDS("data/db.monday.rds")
library(here)
source(here("functions_model_creation.R"))
db.impute[c(2:9)
db.impute[c(2:9)]
db.impute[c(2:9)]
db.impute.logit = lapply(db.impute[c(2:9)],logit_transf) %>%
data.frame()
db.impute.logit$created_at = db.impute$created_at
db.monday.logit = lapply(db.monday[c(2:9)],logit_transf) %>%
data.frame()
db.monday.logit$created_at = db.monday$created_at
db.impute.list = lapply(seq_along(db.impute.logit[1:6]),function(k){
df = db.impute.logit
temp = df[,c(7,8,k)]
return(temp)
print(names(db.impute.logit)[k])
})
db.monday.list = lapply(seq_along(db.monday.logit[1:6]),function(k){
df = db.monday.logit
temp = df[,c(7,8,k)]
return(temp)
print(names(db.impute.logit)[k])
})
dickey_fuller.impute =lapply(db.impute.logit[1:8], function(x){
temp = adf.test(x,k=1)
})
dickey_fuller.monday =lapply(db.monday.logit[1:8], function(x){
temp = adf.test(x,k=1)
})
library(stargazer)
stargazer(summary(dickey_fuller.impute),type = "latex")
names_vec = c("SPD","Linke","Gruene","FDP","AfD","CDU/CSU","TV News","Print Media")
# EXTRACT  DICKEY FULLER
table_output = function(datalist,names_vec){
#extract data
dickey_value =lapply(datalist, function(x){
return(x["statistic"])
}) %>% unlist()
dickey_p =lapply(datalist, function(x){
return(x["p.value"])
}) %>% unlist()
temp = data.frame(names_vec,dickey_value,dickey_p)
temp = temp %>%
mutate(dickey_value = round(dickey_value,3)) %>%
mutate(dickey_value = ifelse(dickey_p<=0.01,paste0(dickey_value,"***"),
ifelse(dickey_p<=0.05,paste0(dickey_value,"**"),dickey_value)),
dickey_p = ifelse(dickey_p<=0.01,paste0("< ",dickey_p),round(dickey_p,3)))
#build structure
res <-structure(c(temp$dickey_value,temp$dickey_p),
.Dim = c(nrow(temp), 2),
.Dimnames = list(names_vec,
c("Dickey Fuller", "p-Value")))
return(res)
}
impute = table_output(dickey_fuller.impute,names_vec)
monday = table_output(dickey_fuller.monday,names_vec)
impute
monday
mod_stargazer("tables/dickey_fuller.tex",impute,type = "latex",
title = "Augmented Dickey-Fuller Test",
colnames = TRUE,
#align=TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
# Packages
library(here)
source(here("functions_model_creation.R"))
# Data
db.impute = readRDS("data/db.impute.rds")
db.monday = readRDS("data/db.monday.rds")
# Packages
library(here)
source(here("functions_model_creation.R"))
db.impute.logit = lapply(db.impute[c(2:9)],logit_transf) %>%
data.frame()
db.impute.logit$created_at = db.impute$created_at
db.monday.logit = lapply(db.monday[c(2:9)],logit_transf) %>%
data.frame()
db.monday.logit$created_at = db.monday$created_at
db.impute.list = lapply(seq_along(db.impute.logit[1:6]),function(k){
df = db.impute.logit
temp = df[,c(7,8,k)]
return(temp)
print(names(db.impute.logit)[k])
})
db.monday.list = lapply(seq_along(db.monday.logit[1:6]),function(k){
df = db.monday.logit
temp = df[,c(7,8,k)]
return(temp)
print(names(db.impute.logit)[k])
})
dickey_fuller.impute =lapply(db.impute.logit[1:8], function(x){
temp = adf.test(x,k=1)
})
dickey_fuller.monday =lapply(db.monday.logit[1:8], function(x){
temp = adf.test(x,k=1)
})
names_vec = c("SPD","Linke","Gruene","FDP","AfD","CDU/CSU","TV News","Print Media")
# EXTRACT  DICKEY FULLER
table_output = function(datalist,names_vec){
#extract data
dickey_value =lapply(datalist, function(x){
return(x["statistic"])
}) %>% unlist()
dickey_p =lapply(datalist, function(x){
return(x["p.value"])
}) %>% unlist()
temp = data.frame(names_vec,dickey_value,dickey_p)
temp = temp %>%
mutate(dickey_value = round(dickey_value,3)) %>%
mutate(dickey_value = ifelse(dickey_p<=0.01,paste0(dickey_value,"***"),
ifelse(dickey_p<=0.05,paste0(dickey_value,"**"),dickey_value)),
dickey_p = ifelse(dickey_p<=0.01,paste0("< ",dickey_p),round(dickey_p,3)))
#build structure
res <-structure(c(temp$dickey_value,temp$dickey_p),
.Dim = c(nrow(temp), 2),
.Dimnames = list(names_vec,
c("Dickey Fuller", "p-Value")))
return(res)
}
impute = table_output(dickey_fuller.impute,names_vec)
monday = table_output(dickey_fuller.monday,names_vec)
stargazer(monday,title = "Augmented Dickey-Fuller Test",
colnames = TRUE,
#align=TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
mod_stargazer("tables/dickey_fuller.tex",impute,type = "latex",
title = "Augmented Dickey-Fuller Test",
colnames = TRUE,
#align=TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
mod_stargazer("tables/dickey_fuller_monday.tex",monday,type = "latex",
title = "Augmented Dickey-Fuller Test",
colnames = TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
mod_stargazer("tables/dickey_fuller_impute.tex",impute,type = "latex",
title = "Augmented Dickey-Fuller Test",
colnames = TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
# Packages
library(xtable)
lag.impute =lapply(db.impute.list,function(x){
lagselect <- VARselect(x, lag.max = 3, type = "const")
return(lagselect)
})
lag.monday =lapply(db.monday.list,function(x){
lagselect <- VARselect(x, lag.max = 3, type = "const")
return(lagselect)
})
lag.impute
lag.monday =lapply(db.monday.list,function(x){
lagselect <- VARselect(x, lag.max = 3, type = "const")
return(lagselect)
})
names_vec = c("SPD","Linke","Gruene","FDP","AfD","CDU/CSU")
create_lag_dataframe = function(datalist,names_vec){
f=lapply(seq_along(datalist),function(d){
temp = datalist[[d]]["criteria"]  %>%
data.frame()
names(temp) = c("P=1","P=2","P=3")
temp = temp %>%
t() %>%
data.frame()
temp = temp %>%
dplyr::select(AIC.n.,HQ.n.,FPE.n.)
temp$party = names_vec[d]
temp$p= rownames(temp)
rownames(temp)=NULL
temp=temp %>%
pivot_wider(id_cols = party,values_from =c(AIC.n.:FPE.n.),names_from = p,names_sort = T )
return(temp)
}) %>% bind_rows()
return(f)
}
impute.lag = create_lag_dataframe(lag.impute,names_vec = names_vec)
impute.monday = create_lag_dataframe(lag.monday,names_vec = names_vec)
impute.monday =impute.monday %>%
mutate_if(is.numeric,function(x){
round(x,3)
})
rownames(impute.monday)=NULL
impute.lag.df = create_lag_dataframe(lag.impute,names_vec = names_vec)
monday.lag.df = create_lag_dataframe(lag.monday,names_vec = names_vec)
monday.lag.df =monday.lag.df %>%
mutate_if(is.numeric,function(x){
round(x,3)
})
impute.lag.df = create_lag_dataframe(lag.impute,names_vec = names_vec)
monday.lag.df = create_lag_dataframe(lag.monday,names_vec = names_vec)
monday.lag.df =monday.lag.df %>%
mutate_if(is.numeric,function(x){
round(x,3)
})
rownames(monday.lag.df)=NULL
impute.lag.df =impute.lag.df %>%
mutate_if(is.numeric,function(x){
round(x,3)
})
rownames(impute.lag.df)=NULL
mod_stargazer(output.file = "tables/monday.lag.text",monday.lag.df,summary=F)
mod_stargazer(output.file = "tables/monday.lag.tex",monday.lag.df,summary=F)
mod_stargazer(output.file = "tables/impute.lag.tex",impute.lag.df,summary=F)
model.monday.lag1 = lapply(db.monday.list,function(x){
temp = VAR(x,lag.max = 1,season = NULL,type = "none",ic = "AIC")
return(temp)
})
model.impute.lag1 = lapply(db.impute.list,function(x){
temp = VAR(x,lag.max = 1,season = NULL,type = "none",ic = "AIC")
return(temp)
})
model.monday.lag1 = lapply(db.monday.list,function(x){
temp = VAR(x,lag.max = 1,season = NULL,type = "none",ic = "AIC")
return(temp)
})
model.impute.lag1 = lapply(db.impute.list,function(x){
temp = VAR(x,lag.max = 1,season = NULL,type = "none",ic = "AIC")
return(temp)
})
# TABLE OF VAR OUTPUT
var_table = function(datalist,type){
lapply(seq_along(datalist),function(i){
names = names(datalist[[i]][["varresult"]])
party = names[3] %>%
gsub("share\\.","",.) %>%
gsub("\\.","/",.)
t=mod_stargazer(output.file = glue::glue("data/plots/VAR raw/var_{names[3]}_{type}.tex"),
datalist[[i]][["varresult"]][1],
datalist[[i]][["varresult"]][2],
datalist[[i]][["varresult"]][3],
out="latex",
covariate.labels = c("TV News","Print Media",party),
column.labels = c("TV News","Print Media",party),
model.numbers	= FALSE,
dep.var.caption = NULL,
dep.var.labels.include = FALSE,
title = glue::glue("Raw VAR results for {party} model"))
return(t)
})
}
var_table(model.impute.lag1,"impute")
var_table(model.monday.lag1,"monday")
# TABLE OF VAR OUTPUT
var_table = function(datalist,type){
lapply(seq_along(datalist),function(i){
names = names(datalist[[i]][["varresult"]])
party = names[3] %>%
gsub("share\\.","",.) %>%
gsub("\\.","/",.)
t=mod_stargazer(output.file = glue::glue("tables/var_{names[3]}_{type}.tex"),
datalist[[i]][["varresult"]][1],
datalist[[i]][["varresult"]][2],
datalist[[i]][["varresult"]][3],
out="latex",
covariate.labels = c("TV News","Print Media",party),
column.labels = c("TV News","Print Media",party),
model.numbers	= FALSE,
dep.var.caption = NULL,
dep.var.labels.include = FALSE,
title = glue::glue("Raw VAR results for {party} model"))
return(t)
})
}
var_table(model.impute.lag1,"impute")
var_table(model.monday.lag1,"monday")
temp = serial.test(x,lags.pt = 1, type = "PT.asymptotic")
###################################
### AUTOCORRELATION/SERIAL TEST ###
###################################
serial.impute.lag1 = lapply(model.impute.lag1,function(x){
temp = serial.test(x,lags.pt = 1, type = "PT.asymptotic")
return(temp)
})
serial.monday.lag1 = lapply(model.monday.lag1,function(x){
temp = serial.test(x,lags.pt = 1, type = "PT.asymptotic")
return(temp)
})
table_output_ac = function(datalist,names_vec){
#extract data
ac_value =lapply(datalist, function(x){
return(x[["serial"]]["statistic"])
}) %>% unlist()
ac_p =lapply(datalist, function(x){
return(x[["serial"]]["p.value"])
}) %>% unlist()
temp = data.frame(names_vec,ac_value,ac_p)
temp = temp %>%
mutate(ac_value = round(ac_value,3)) %>%
mutate(ac_value = ifelse(ac_p<=0.01,paste0(ac_value,"***"),
ifelse(ac_p<=0.05,paste0(ac_value,"**"),ac_value)),
ac_p = ifelse(ac_p<=0.01,paste0("< ",ac_p),round(ac_p,3)))
#build structure
res <-structure(c(temp$ac_value),
.Dim = c(nrow(temp), 1),
.Dimnames = list(names_vec,
c("Chi-squared")))
return(res)
}
impute = table_output_ac(serial.impute.lag1,names_vec)
monday = table_output_ac(serial.monday.lag1,names_vec)
impute = table_output_ac(serial.impute.lag1,names_vec)
monday = table_output_ac(serial.monday.lag1,names_vec)
mod_stargazer("tables/autocorrelation_impute.tex",impute,type = "latex",
title = "Portmanteau Test (asymptotic)",
colnames = TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
mod_stargazer("tables/autocorrelation_monday.txt",monday,type = "latex",
title = "Portmanteau Test (asymptotic)",
colnames = TRUE,
notes = "Sig. Levels: ${}^{***} p < .01$, ${}^{**} p < .05$, ${}^{*} p < .1$")
#########################
### GRANGER CAUSALITY ###
#########################
granger.impute = lapply(model.impute.lag1,function(x){
y_names = x[["y"]] %>% colnames()
cause.tv = causality(x, cause = y_names[1])
cause.print = causality(x, cause = y_names[2])
cause.tweet = causality(x, cause = y_names[3])
result = list(cause.tv,cause.print,cause.tweet)
return(result)
})
granger.monday = lapply(model.monday.lag1,function(x){
y_names = x[["y"]] %>% colnames()
cause.tv = causality(x, cause = y_names[1])
cause.print = causality(x, cause = y_names[2])
cause.tweet = causality(x, cause = y_names[3])
result = list(cause.tv,cause.print,cause.tweet)
return(result)
})
granger.monday %>% unlist()
granger.impute %>% unlist()
# Font for plots
font_add_google("Noto Serif","noto")
showtext_auto()
irf.impute.7.7 = lapply(model.impute.lag1, function(x){
y_names = x[["y"]] %>% colnames()
partyname = y_names[3]
partyname = gsub("share\\.","",partyname)
temp = process_irf(x,partyname,7,7)
temp$party = partyname
return(temp)
})
irf.monday.7.7 = lapply(model.monday.lag1, function(x){
y_names = x[["y"]] %>% colnames()
partyname = y_names[3]
partyname = gsub("share\\.","",partyname)
temp = process_irf(x,partyname,7,7)
temp$party = partyname
return(temp)
})
source(here("plot_function.R"))
source(here("plot_irf.R"))
source(here("plot_irf.R"))
media.response(irf.impute.7.7, response_of = "share.tv")
dev.off()
media.response(irf.impute.7.7, response_of = "share.tv")
media.response(irf.impute.7.7, response_of = "share.print")
media.response(irf.monday.7.7, response_of = "share.tv")
media.response(irf.monday.7.7, response_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.impute.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.impute.7.7,response_of = "share.tv",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.monday.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "share.tv",impulse_of = "party")
dev.off()
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.impute.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.impute.7.7,response_of = "share.tv",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.monday.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "share.tv",impulse_of = "party")
dev.off()
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.impute.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.impute.7.7,response_of = "share.tv",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.monday.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "share.tv",impulse_of = "party")
source(here("plot_irf.R"))
media.response(irf.impute.7.7, response_of = "share.tv")
media.response(irf.impute.7.7, response_of = "share.print")
media.response(irf.monday.7.7, response_of = "share.tv")
media.response(irf.monday.7.7, response_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.impute.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.impute.7.7,response_of = "share.tv",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.monday.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "share.tv",impulse_of = "party")
source(here("plot_irf.R"))
media.response(irf.impute.7.7, response_of = "share.tv")
media.response(irf.impute.7.7, response_of = "share.print")
media.response(irf.monday.7.7, response_of = "share.tv")
media.response(irf.monday.7.7, response_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.impute.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.impute.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.impute.7.7,response_of = "share.tv",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.print")
party.response(irf.monday.7.7,response_of = "party",impulse_of = "share.tv")
party.response(irf.monday.7.7,response_of = "share.print",impulse_of = "party")
party.response(irf.monday.7.7,response_of = "share.tv",impulse_of = "party")
# Data
tv <- read_dta("data/raw/ZA6808_v1-0-0.dta")
print <- read_dta("data/raw/ZA6809_v1-0-0.dta")
topics_raw =read_excel("data/raw/ZA680x_topics_raw.xlsx")
topics.final =
topics_raw %>%
setNames(c("id","topic")) %>%
mutate(id = zoo::na.locf(id)) %>%
filter(!is.na(topic)) %>%
mutate(topic_id = str_extract(id,"\\d\\d\\d\\d")) %>%
filter(!is.na(topic_id)) %>%
group_by(topic_id) %>%
mutate(description = paste0(topic,collapse = ", ")) %>%
ungroup() %>%
distinct(topic_id,.keep_all = T) %>%
select(topic_id,description) %>%
mutate(mod = as.numeric(topic_id) %% 10,
meta_id = floor(as.numeric(topic_id)/10)*10)
